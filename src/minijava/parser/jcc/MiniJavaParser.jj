options
{
  static = false;
}

// -----------------------------------------------------------------------------

PARSER_BEGIN(JCCMiniJavaParser)
package minijava.parser.jcc;

import java.util.ArrayList;
import minijava.ast.*;

public class JCCMiniJavaParser {}

PARSER_END(JCCMiniJavaParser)

// -----------------------------------------------------------------------------

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

// -----------------------------------------------------------------------------

TOKEN : /* KEYWORDS */
{
  < CLASS   : "class" >
| < PUBLIC  : "public" >
| < STATIC  : "static" >
| < VOID    : "void" >
| < MAIN    : "main" >
| < STRING  : "String" >
| < EXTENDS : "extends" >
| < RETURN  : "return" >
| < IF      : "if" >
| < ELSE    : "else" >
| < WHILE   : "while" >
| < TRUE    : "true" >
| < FALSE   : "false" >
| < THIS    : "this" >
| < NEW     : "new" >
| < LENGTH  : "length" >
}

// -----------------------------------------------------------------------------

TOKEN : /* OPERATORS */
{
  < PLUS      : "+" >
| < MINUS     : "-" >
| < MULTIPLY  : "*" >
| < DIVIDE    : "/" >
| < EQUAL     : "=" >
| < AND       : "&&" >
| < LESS_THAN : "<" >
| < DOT       : "." >
| < NOT       : "!" >
}

// -----------------------------------------------------------------------------

TOKEN : /* SEPARATORS */
{
  < LPAR      : "(" >
| < RPAR      : ")" >
| < LBRACK    : "[" >
| < RBRACK    : "]" >
| < LBRACE    : "{" >
| < RBRACE    : "}" >
| < COMMA     : "," >
| < SEMICOLON : ";" >
}

// -----------------------------------------------------------------------------

TOKEN : /* METHODS */
{
  < PRINTLN : "System.out.println" >
}

// -----------------------------------------------------------------------------

TOKEN :
{
  < TYPE_INT       : "int" >
| < TYPE_BOOLEAN   : "boolean" >
| < TYPE_INT_ARRAY : < TYPE_INT > (< LBRACK > < RBRACK >)? >
| < CONSTANT       : (< DIGIT >)+ >
| < IDENTIFIER     : < LETTER > (< LETTER > | < DIGIT > | "_")* >
| < #DIGIT         : [ "0"-"9" ] >
| < #LETTER        : [ "a"-"z", "A"-"Z" ] >
}

// -----------------------------------------------------------------------------

Program Program() :
{
  MainClass             mainClass;
  ClassDecl             c;
  ArrayList<ClassDecl>  otherClasses = new ArrayList<ClassDecl>();
}
{
  mainClass = Main()
  ( c       = ClassDeclaration() { otherClasses.add(c); } )*
              < EOF >
  { return new Program(mainClass, new NodeList<ClassDecl>(otherClasses)); }
}

// -----------------------------------------------------------------------------

MainClass Main() :
{
  Token     className,
            argName;
  Statement s;
}
{
              < CLASS >
  className = < IDENTIFIER >
              < LBRACE >
              < PUBLIC >
              < STATIC >
              < VOID >
              < MAIN >
              < LPAR >
              < STRING >
              < LBRACK >
              < RBRACK >
  argName   = < IDENTIFIER >
              < RPAR >
              < LBRACE >
  s         = Statement()
              < RBRACE >
              < RBRACE >
  { return new MainClass(className.image, argName.image, s); }
}

// -----------------------------------------------------------------------------

ClassDecl ClassDeclaration() :
{
  Token                 name,
                        superName = null;
  VarDecl               v;
  MethodDecl            m;
  ArrayList<VarDecl>    vars      = new ArrayList<VarDecl>();
  ArrayList<MethodDecl> methods   = new ArrayList<MethodDecl>();
}
{
  < CLASS >
  name = < IDENTIFIER >
  (
    < EXTENDS >
    superName = < IDENTIFIER >
  )?
  < LBRACE >
  (
    v = VarDeclaration()    { vars.add(v); }
  | m = MethodDeclaration() { methods.add(m); }
  )*
  < RBRACE >
  { return new ClassDecl( name.image,
                          (superName != null) ? superName.image : "",
                          new NodeList<VarDecl>(vars),
                          new NodeList<MethodDecl>(methods)); }
}

// -----------------------------------------------------------------------------

VarDecl VarDeclaration() :
{
  Type  type;
  Token id;
}
{
  type  = Type()
  id    = < IDENTIFIER >
          < SEMICOLON >
  { return new VarDecl(VarDecl.Kind.LOCAL, type, id.image); }
}

// -----------------------------------------------------------------------------

MethodDecl MethodDeclaration() :
{
  Type                  returnType;
  Token                 id;
  VarDecl               varDecl;
  Statement             s;
  ArrayList<VarDecl>    formals     = new ArrayList<VarDecl>();
  ArrayList<VarDecl>    vars        = new ArrayList<VarDecl>();
  ArrayList<Statement>  statements  = new ArrayList<Statement>();
  Expression            returnExp;
}
{
                < PUBLIC >
  returnType  = Type()
  id          = < IDENTIFIER >
                < LPAR >
  formals     = FormalList()
                < RPAR >
                < LBRACE >
  (
    LOOKAHEAD(2)
    varDecl   = VarDeclaration()  { vars.add(varDecl); }
  )*
  (
    LOOKAHEAD(2)
    s         = Statement()       { statements.add(s); }
  )*
                < RETURN >
  returnExp   = Expression()
                < SEMICOLON >
                < RBRACE >
  { return new MethodDecl(returnType,
                          id.image,
                          formals,
                          vars,
                          statements,
                          returnExp); }
}

// -----------------------------------------------------------------------------

ArrayList<VarDecl> FormalList() :
{
  Type                t;
  Token               id;
  ArrayList<VarDecl>  formals = new ArrayList<VarDecl>();
}
{
  (
    t   = Type()
    id  = < IDENTIFIER >
    { formals.add(new VarDecl(VarDecl.Kind.FORMAL, t, id.image)); }
    (
            < COMMA >
      t   = Type()
      id  = < IDENTIFIER >
      { formals.add(new VarDecl(VarDecl.Kind.FORMAL, t, id.image)); }
    )*
  )?
  { return formals; }
}

// -----------------------------------------------------------------------------

Statement Statement() :
{
  Token                 name;
  Expression            e1,
                        e2;
  Statement             s1,
                        s2;
  ArrayList<Statement>  statements = new ArrayList<Statement>();
}
{
          < LBRACE >
  ( s1  = Statement() { statements.add(s1); } )*
          < RBRACE >
  { return new Block(new NodeList<Statement>(statements)); }
|       < IF >
        < LPAR >
  e1  = Expression()
        < RPAR >
  s1  = Statement()
        < ELSE >
  s2  = Statement()
  { return new If(e1, s1, s2); }
|       < WHILE >
        < LPAR >
  e1  = Expression()
        < RPAR >
  s1  = Statement()
  { return new While(e1, s1); }
|       < PRINTLN >
        < LPAR >
  e1  = Expression()
        < RPAR >
        < SEMICOLON >
  { return new Print(e1); }
| LOOKAHEAD(2)
  name  = < IDENTIFIER >
          < EQUAL >
  e1    = Expression()
          < SEMICOLON >
  { return new Assign(name.image, e1); }
| name  = < IDENTIFIER >
          < LBRACK >
  e1    = Expression()
          < RBRACK >
          < EQUAL >
  e2    = Expression()
          < SEMICOLON >
  { return new ArrayAssign(name.image, e1, e2); }
}

// -----------------------------------------------------------------------------

Expression ExprVal() :
{
  Token       id;
  Expression  e;
}
{ id = < CONSTANT >   { return new IntegerLiteral(id.image); }
| < TRUE >            { return new BooleanLiteral(true); }
| < FALSE >           { return new BooleanLiteral(false); }
| id = < IDENTIFIER > { return new IdentifierExp(id.image); }
| < THIS >            { return new This(); }
| LOOKAHEAD(2)
        < NEW >
        < TYPE_INT >
        < LBRACK >
  e   = Expression()
        < RBRACK >
  { return new NewArray(e); }
|       < NEW >
  id  = < IDENTIFIER >
        < LPAR >
        < RPAR >
  { return new NewObject(id.image); }
|   < NOT >
  e = Expression()
  { return new Not(e); }
|     < LPAR >
  e   = Expression()
      < RPAR >
  { return e; }
}

// -----------------------------------------------------------------------------

Expression ExprRest(Expression e) :
{
  Token                 id;
  Expression            e1,
                        e2,
                        e3;
  ArrayList<Expression> rands = new ArrayList<Expression>();
}
{
  { e1 = e; }
  (
    (
      < AND >
      e2 = Expression()
      { return new And(e1, e2); }
    | < LESS_THAN >
      e2 = Expression()
      { return new LessThan(e1, e2); }
    | < PLUS >
      e2 = Expression()
      { return new Plus(e1, e2); }
    | < MINUS >
      e2 = Expression()
      { return new Minus(e1, e2); }
    | < MULTIPLY >
      e2 = Expression()
      { return new Times(e1, e2); }
    )

  |       < LBRACK >
    e2  = Expression()
          < RBRACK >
    { return new ArrayLookup(e1, e2); }
  | LOOKAHEAD(2)
          < DOT >
          < LENGTH >
    { return new ArrayLength(e1); }
  |       < DOT >
    id  = < IDENTIFIER >
          < LPAR >
          (
            e2 = Expression()
            { rands.add(e2); }
            (
              < COMMA >
              e3 = Expression()
              { rands.add(e3); }
            )*
          )?
          < RPAR >
    { return new Call(e1, id.image, new NodeList<Expression>(rands)); }
  | { return e; }
   
  )
}

// -----------------------------------------------------------------------------

Expression Expression() :
{
  Expression  e,
              r;
}
{
  e = ExprVal()
  r = ExprRest(e)
  { return r; }
}

// -----------------------------------------------------------------------------

Type Type() :
{ Token t; }
{
  t = < TYPE_INT >        { return new IntegerType(); }
| t = < TYPE_INT_ARRAY >  { return new IntArrayType(); }
| t = < TYPE_BOOLEAN >    { return new BooleanType(); }
| t = < IDENTIFIER >      { return new ObjectType(t.image); }
}
